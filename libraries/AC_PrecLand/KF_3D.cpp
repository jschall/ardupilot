#include "KF_3D.h"
void KF_3D::init(const Vector3f& los_unit_ned, float align_xy_sigma, float align_z_sigma, const Vector3f& vel, float vel_xy_sigma, float vel_z_sigma) {
    uint8_t next_state_idx = (_state_idx+1)%2;
    float* state_n = _state[next_state_idx].x;
    float* cov_n = _state[next_state_idx].P;

    // INITIALIZATION
    state_n[0] = 0;
    state_n[1] = 0;
    state_n[2] = 0;
    state_n[3] = vel[0];
    state_n[4] = vel[1];
    state_n[5] = vel[2];
    state_n[6] = los_unit_ned[0];
    state_n[7] = los_unit_ned[1];
    state_n[8] = los_unit_ned[2];
    state_n[9] = 0.250000000000000;
    cov_n[0] = 0;
    cov_n[1] = 0;
    cov_n[2] = 0;
    cov_n[3] = 0;
    cov_n[4] = 0;
    cov_n[5] = 0;
    cov_n[6] = 0;
    cov_n[7] = 0;
    cov_n[8] = 0;
    cov_n[9] = 0;
    cov_n[10] = 0;
    cov_n[11] = 0;
    cov_n[12] = 0;
    cov_n[13] = 0;
    cov_n[14] = 0;
    cov_n[15] = 0;
    cov_n[16] = 0;
    cov_n[17] = 0;
    cov_n[18] = 0;
    cov_n[19] = 0;
    cov_n[20] = 0;
    cov_n[21] = 0;
    cov_n[22] = 0;
    cov_n[23] = 0;
    cov_n[24] = 0;
    cov_n[25] = 0;
    cov_n[26] = 0;
    cov_n[27] = ((vel_xy_sigma)*(vel_xy_sigma));
    cov_n[28] = 0;
    cov_n[29] = 0;
    cov_n[30] = 0;
    cov_n[31] = 0;
    cov_n[32] = 0;
    cov_n[33] = 0;
    cov_n[34] = ((vel_xy_sigma)*(vel_xy_sigma));
    cov_n[35] = 0;
    cov_n[36] = 0;
    cov_n[37] = 0;
    cov_n[38] = 0;
    cov_n[39] = 0;
    cov_n[40] = ((vel_z_sigma)*(vel_z_sigma));
    cov_n[41] = 0;
    cov_n[42] = 0;
    cov_n[43] = 0;
    cov_n[44] = 0;
    cov_n[45] = 1.0*((align_xy_sigma)*(align_xy_sigma))*((los_unit_ned[2])*(los_unit_ned[2])) + 1.0*((align_z_sigma)*(align_z_sigma))*((los_unit_ned[1])*(los_unit_ned[1]));
    cov_n[46] = -1.0*((align_z_sigma)*(align_z_sigma))*los_unit_ned[0]*los_unit_ned[1];
    cov_n[47] = -1.0*((align_xy_sigma)*(align_xy_sigma))*los_unit_ned[0]*los_unit_ned[2];
    cov_n[48] = 0;
    cov_n[49] = 1.0*((align_xy_sigma)*(align_xy_sigma))*((los_unit_ned[2])*(los_unit_ned[2])) + 1.0*((align_z_sigma)*(align_z_sigma))*((los_unit_ned[0])*(los_unit_ned[0]));
    cov_n[50] = -1.0*((align_xy_sigma)*(align_xy_sigma))*los_unit_ned[1]*los_unit_ned[2];
    cov_n[51] = 0;
    cov_n[52] = 1.0*((align_xy_sigma)*(align_xy_sigma))*((los_unit_ned[0])*(los_unit_ned[0])) + 1.0*((align_xy_sigma)*(align_xy_sigma))*((los_unit_ned[1])*(los_unit_ned[1]));
    cov_n[53] = 0;
    cov_n[54] = 0.0156250000000000;

    _state_idx = next_state_idx;
}

void KF_3D::predict(float dt, const Vector3f& del_vel, float del_vel_sigma) {
    uint8_t next_state_idx = (_state_idx+1)%2;
    float* state = _state[_state_idx].x;
    float* cov = _state[_state_idx].P;
    float* state_n = _state[next_state_idx].x;
    float* cov_n = _state[next_state_idx].P;

    // PREDICTION
    // 93 operations
    state_n[0] = dt*state[3] + state[0];
    state_n[1] = dt*state[4] + state[1];
    state_n[2] = dt*state[5] + state[2];
    state_n[3] = del_vel[0] + state[3];
    state_n[4] = del_vel[1] + state[4];
    state_n[5] = del_vel[2] + state[5];
    state_n[6] = state[6];
    state_n[7] = state[7];
    state_n[8] = state[8];
    state_n[9] = state[9];
    cov_n[0] = cov[0] + cov[3]*dt + dt*(cov[27]*dt + cov[3]);
    cov_n[1] = cov[12]*dt + cov[1] + dt*(cov[28]*dt + cov[4]);
    cov_n[2] = cov[20]*dt + cov[2] + dt*(cov[29]*dt + cov[5]);
    cov_n[3] = cov[27]*dt + cov[3];
    cov_n[4] = cov[28]*dt + cov[4];
    cov_n[5] = cov[29]*dt + cov[5];
    cov_n[6] = cov[30]*dt + cov[6];
    cov_n[7] = cov[31]*dt + cov[7];
    cov_n[8] = cov[32]*dt + cov[8];
    cov_n[9] = cov[33]*dt + cov[9];
    cov_n[10] = cov[10] + cov[13]*dt + dt*(cov[13] + cov[34]*dt);
    cov_n[11] = cov[11] + cov[21]*dt + dt*(cov[14] + cov[35]*dt);
    cov_n[12] = cov[12] + cov[28]*dt;
    cov_n[13] = cov[13] + cov[34]*dt;
    cov_n[14] = cov[14] + cov[35]*dt;
    cov_n[15] = cov[15] + cov[36]*dt;
    cov_n[16] = cov[16] + cov[37]*dt;
    cov_n[17] = cov[17] + cov[38]*dt;
    cov_n[18] = cov[18] + cov[39]*dt;
    cov_n[19] = cov[19] + cov[22]*dt + dt*(cov[22] + cov[40]*dt);
    cov_n[20] = cov[20] + cov[29]*dt;
    cov_n[21] = cov[21] + cov[35]*dt;
    cov_n[22] = cov[22] + cov[40]*dt;
    cov_n[23] = cov[23] + cov[41]*dt;
    cov_n[24] = cov[24] + cov[42]*dt;
    cov_n[25] = cov[25] + cov[43]*dt;
    cov_n[26] = cov[26] + cov[44]*dt;
    cov_n[27] = cov[27] + ((del_vel_sigma)*(del_vel_sigma));
    cov_n[28] = cov[28];
    cov_n[29] = cov[29];
    cov_n[30] = cov[30];
    cov_n[31] = cov[31];
    cov_n[32] = cov[32];
    cov_n[33] = cov[33];
    cov_n[34] = cov[34] + ((del_vel_sigma)*(del_vel_sigma));
    cov_n[35] = cov[35];
    cov_n[36] = cov[36];
    cov_n[37] = cov[37];
    cov_n[38] = cov[38];
    cov_n[39] = cov[39];
    cov_n[40] = cov[40] + ((del_vel_sigma)*(del_vel_sigma));
    cov_n[41] = cov[41];
    cov_n[42] = cov[42];
    cov_n[43] = cov[43];
    cov_n[44] = cov[44];
    cov_n[45] = cov[45];
    cov_n[46] = cov[46];
    cov_n[47] = cov[47];
    cov_n[48] = cov[48];
    cov_n[49] = cov[49];
    cov_n[50] = cov[50];
    cov_n[51] = cov[51];
    cov_n[52] = cov[52];
    cov_n[53] = cov[53];
    cov_n[54] = cov[54];

    _state_idx = next_state_idx;
}



bool KF_3D::fuse_los_ned(const Vector3f& los_unit_ned, float align_xy_sigma, float align_z_sigma, float NIS_threshold) {
    uint8_t next_state_idx = (_state_idx+1)%2;
    float* state = _state[_state_idx].x;
    float* cov = _state[_state_idx].P;
    float* state_n = _state[next_state_idx].x;
    float* cov_n = _state[next_state_idx].P;

    // LOS FUSION
    // 1564 operations
    float subx_0 = sqrtf(((-state[0]*state[9] + state[6])*(-state[0]*state[9] + state[6])) + ((-state[1]*state[9] + state[7])*(-state[1]*state[9] + state[7])) + ((-state[2]*state[9] + state[8])*(-state[2]*state[9] + state[8])));
    float subx_1 = los_unit_ned[0]*subx_0 + state[0]*state[9] - state[6];
    float subx_2 = -cov[0]*state[9] + cov[6] - cov[9]*state[0];
    float subx_3 = cov[18]*state[9];
    float subx_4 = cov[51] - cov[54]*state[1] - subx_3;
    float subx_5 = -cov[1]*state[9] + cov[7] - cov[9]*state[1];
    float subx_6 = cov[15]*state[9];
    float subx_7 = cov[46] - cov[48]*state[1] - subx_6;
    float subx_8 = -1.0*((align_z_sigma)*(align_z_sigma))*los_unit_ned[0]*los_unit_ned[1] - state[0]*subx_4 - state[9]*subx_5 + subx_7;
    float subx_9 = cov[26]*state[9];
    float subx_10 = cov[53] - cov[54]*state[2] - subx_9;
    float subx_11 = -cov[19]*state[9] + cov[25] - cov[26]*state[2];
    float subx_12 = ((align_xy_sigma)*(align_xy_sigma));
    float subx_13 = cov[25]*state[9];
    float subx_14 = cov[52] - cov[53]*state[2] - subx_13;
    float subx_15 = 1.0*((los_unit_ned[0])*(los_unit_ned[0]))*subx_12 + 1.0*((los_unit_ned[1])*(los_unit_ned[1]))*subx_12 - state[2]*subx_10 - state[9]*subx_11 + subx_14;
    float subx_16 = -cov[2]*state[9] + cov[8] - cov[9]*state[2];
    float subx_17 = cov[23]*state[9];
    float subx_18 = cov[47] - cov[48]*state[2] - subx_17;
    float subx_19 = -1.0*los_unit_ned[0]*los_unit_ned[2]*subx_12 - state[0]*subx_10 - state[9]*subx_16 + subx_18;
    float subx_20 = -cov[10]*state[9] + cov[16] - cov[18]*state[1];
    float subx_21 = cov[16]*state[9];
    float subx_22 = cov[49] - cov[51]*state[1] - subx_21;
    float subx_23 = 1.0*((align_z_sigma)*(align_z_sigma))*((los_unit_ned[0])*(los_unit_ned[0])) + 1.0*((los_unit_ned[2])*(los_unit_ned[2]))*subx_12 - state[1]*subx_4 - state[9]*subx_20 + subx_22;
    float subx_24 = cov[11]*state[9];
    float subx_25 = cov[17] - cov[18]*state[2] - subx_24;
    float subx_26 = cov[24]*state[9];
    float subx_27 = cov[50] - cov[51]*state[2] - subx_26;
    float subx_28 = -1.0*los_unit_ned[1]*los_unit_ned[2]*subx_12 - state[1]*subx_10 - state[9]*subx_25 + subx_27;
    float subx_29 = cov[9]*state[9];
    float subx_30 = cov[48] - cov[54]*state[0] - subx_29;
    float subx_31 = cov[6]*state[9];
    float subx_32 = cov[45] - cov[48]*state[0] - subx_31;
    float subx_33 = 1.0*((align_z_sigma)*(align_z_sigma))*((los_unit_ned[1])*(los_unit_ned[1])) + 1.0*((los_unit_ned[2])*(los_unit_ned[2]))*subx_12 - state[0]*subx_30 - state[9]*subx_2 + subx_32;
    float subx_34 = subx_19*subx_8*(-2*cov[24]*state[9] + 2*cov[50] - 2*cov[51]*state[2] - 2.0*los_unit_ned[1]*los_unit_ned[2]*subx_12 - 2*state[1]*subx_10 - 2*state[9]*subx_25);
    float subx_35 = 1.0/(subx_15*subx_23*subx_33 - subx_15*((subx_8)*(subx_8)) - ((subx_19)*(subx_19))*subx_23 - ((subx_28)*(subx_28))*subx_33 + subx_34);
    float subx_36 = subx_35*(subx_15*subx_23 - ((subx_28)*(subx_28)));
    float subx_37 = subx_35*(-subx_19*subx_23 + subx_28*subx_8);
    float subx_38 = subx_35*(-subx_15*subx_8 + subx_19*subx_28);
    float subx_39 = los_unit_ned[1]*subx_0 + state[1]*state[9] - state[7];
    float subx_40 = 1.0/(-subx_15*subx_23*subx_33 + subx_15*((subx_8)*(subx_8)) + ((subx_19)*(subx_19))*subx_23 + ((subx_28)*(subx_28))*subx_33 - subx_34);
    float subx_41 = subx_40*(-subx_19*subx_8 + subx_28*subx_33);
    float subx_42 = subx_35*(subx_15*subx_33 - ((subx_19)*(subx_19)));
    float subx_43 = subx_16*subx_41 + subx_2*subx_38 + subx_42*subx_5;
    float subx_44 = los_unit_ned[2]*subx_0 + state[2]*state[9] - state[8];
    float subx_45 = subx_40*(-subx_23*subx_33 + ((subx_8)*(subx_8)));
    float subx_46 = subx_16*subx_45 + subx_2*subx_37 + subx_41*subx_5;
    float subx_47 = cov[15] - cov[18]*state[0] - cov[1]*state[9];
    float subx_48 = subx_20*subx_38 + subx_25*subx_37 + subx_36*subx_47;
    float subx_49 = subx_20*subx_41 + subx_25*subx_45 + subx_37*subx_47;
    float subx_50 = cov[23] - cov[26]*state[0] - cov[2]*state[9];
    float subx_51 = cov[24] - cov[26]*state[1] - subx_24;
    float subx_52 = subx_11*subx_37 + subx_36*subx_50 + subx_38*subx_51;
    float subx_53 = subx_11*subx_41 + subx_38*subx_50 + subx_42*subx_51;
    float subx_54 = cov[30] - cov[33]*state[0] - cov[3]*state[9];
    float subx_55 = -cov[20]*state[9] + cov[32] - cov[33]*state[2];
    float subx_56 = -cov[12]*state[9] + cov[31] - cov[33]*state[1];
    float subx_57 = subx_36*subx_54 + subx_37*subx_55 + subx_38*subx_56;
    float subx_58 = subx_38*subx_54 + subx_41*subx_55 + subx_42*subx_56;
    float subx_59 = subx_37*subx_54 + subx_41*subx_56 + subx_45*subx_55;
    float subx_60 = cov[36] - cov[39]*state[0] - cov[4]*state[9];
    float subx_61 = -cov[21]*state[9] + cov[38] - cov[39]*state[2];
    float subx_62 = -cov[13]*state[9] + cov[37] - cov[39]*state[1];
    float subx_63 = subx_36*subx_60 + subx_37*subx_61 + subx_38*subx_62;
    float subx_64 = subx_38*subx_60 + subx_41*subx_61 + subx_42*subx_62;
    float subx_65 = subx_37*subx_60 + subx_41*subx_62 + subx_45*subx_61;
    float subx_66 = cov[5]*state[9];
    float subx_67 = cov[41] - cov[44]*state[0] - subx_66;
    float subx_68 = cov[22]*state[9];
    float subx_69 = cov[43] - cov[44]*state[2] - subx_68;
    float subx_70 = cov[14]*state[9];
    float subx_71 = cov[42] - cov[44]*state[1] - subx_70;
    float subx_72 = subx_36*subx_67 + subx_37*subx_69 + subx_38*subx_71;
    float subx_73 = subx_38*subx_67 + subx_41*subx_69 + subx_42*subx_71;
    float subx_74 = subx_37*subx_67 + subx_41*subx_71 + subx_45*subx_69;
    float subx_75 = subx_18*subx_37 + subx_32*subx_36 + subx_38*subx_7;
    float subx_76 = subx_18*subx_41 + subx_32*subx_38 + subx_42*subx_7;
    float subx_77 = subx_18*subx_45 + subx_32*subx_37 + subx_41*subx_7;
    float subx_78 = cov[7]*state[9];
    float subx_79 = cov[46] - cov[51]*state[0] - subx_78;
    float subx_80 = subx_22*subx_38 + subx_27*subx_37 + subx_36*subx_79;
    float subx_81 = subx_22*subx_42 + subx_27*subx_41 + subx_38*subx_79;
    float subx_82 = subx_22*subx_41 + subx_27*subx_45 + subx_37*subx_79;
    float subx_83 = cov[8]*state[9];
    float subx_84 = cov[47] - cov[53]*state[0] - subx_83;
    float subx_85 = cov[17]*state[9];
    float subx_86 = cov[50] - cov[53]*state[1] - subx_85;
    float subx_87 = subx_14*subx_37 + subx_36*subx_84 + subx_38*subx_86;
    float subx_88 = subx_14*subx_41 + subx_38*subx_84 + subx_42*subx_86;
    float subx_89 = subx_14*subx_45 + subx_37*subx_84 + subx_41*subx_86;
    float subx_90 = state[9]*(subx_16*subx_37 + subx_2*subx_36 + subx_38*subx_5) + 1;
    float subx_91 = -subx_16*subx_37 - subx_2*subx_36 - subx_38*subx_5;
    float subx_92 = -subx_16*subx_41 - subx_2*subx_38 - subx_42*subx_5;
    float subx_93 = -subx_16*subx_45 - subx_2*subx_37 - subx_41*subx_5;
    float subx_94 = state[0]*(subx_16*subx_37 + subx_2*subx_36 + subx_38*subx_5) + state[1]*subx_43 + state[2]*subx_46;
    float subx_95 = state[9]*(subx_20*subx_42 + subx_25*subx_41 + subx_38*subx_47) + 1;
    float subx_96 = -subx_20*subx_38 - subx_25*subx_37 - subx_36*subx_47;
    float subx_97 = -subx_20*subx_42 - subx_25*subx_41 - subx_38*subx_47;
    float subx_98 = -subx_20*subx_41 - subx_25*subx_45 - subx_37*subx_47;
    float subx_99 = state[0]*subx_48 + state[1]*(subx_20*subx_42 + subx_25*subx_41 + subx_38*subx_47) + state[2]*subx_49;
    float subx_100 = state[9]*(subx_11*subx_45 + subx_37*subx_50 + subx_41*subx_51) + 1;
    float subx_101 = -subx_11*subx_37 - subx_36*subx_50 - subx_38*subx_51;
    float subx_102 = -subx_11*subx_41 - subx_38*subx_50 - subx_42*subx_51;
    float subx_103 = -subx_11*subx_45 - subx_37*subx_50 - subx_41*subx_51;
    float subx_104 = state[0]*subx_52 + state[1]*subx_53 + state[2]*(subx_11*subx_45 + subx_37*subx_50 + subx_41*subx_51);
    float subx_105 = -subx_36*subx_54 - subx_37*subx_55 - subx_38*subx_56;
    float subx_106 = -subx_38*subx_54 - subx_41*subx_55 - subx_42*subx_56;
    float subx_107 = -subx_37*subx_54 - subx_41*subx_56 - subx_45*subx_55;
    float subx_108 = state[0]*subx_57 + state[1]*subx_58 + state[2]*subx_59;
    float subx_109 = -subx_36*subx_60 - subx_37*subx_61 - subx_38*subx_62;
    float subx_110 = -subx_38*subx_60 - subx_41*subx_61 - subx_42*subx_62;
    float subx_111 = -subx_37*subx_60 - subx_41*subx_62 - subx_45*subx_61;
    float subx_112 = state[0]*subx_63 + state[1]*subx_64 + state[2]*subx_65;
    float subx_113 = -subx_36*subx_67 - subx_37*subx_69 - subx_38*subx_71;
    float subx_114 = -subx_38*subx_67 - subx_41*subx_69 - subx_42*subx_71;
    float subx_115 = -subx_37*subx_67 - subx_41*subx_71 - subx_45*subx_69;
    float subx_116 = state[0]*subx_72 + state[1]*subx_73 + state[2]*subx_74;
    float subx_117 = -subx_18*subx_37 - subx_32*subx_36 - subx_38*subx_7 + 1;
    float subx_118 = -subx_18*subx_41 - subx_32*subx_38 - subx_42*subx_7;
    float subx_119 = -subx_18*subx_45 - subx_32*subx_37 - subx_41*subx_7;
    float subx_120 = state[0]*subx_75 + state[1]*subx_76 + state[2]*subx_77;
    float subx_121 = -subx_22*subx_38 - subx_27*subx_37 - subx_36*subx_79;
    float subx_122 = -subx_22*subx_42 - subx_27*subx_41 - subx_38*subx_79 + 1;
    float subx_123 = -subx_22*subx_41 - subx_27*subx_45 - subx_37*subx_79;
    float subx_124 = state[0]*subx_80 + state[1]*subx_81 + state[2]*subx_82;
    float subx_125 = state[0]*subx_87 + state[1]*subx_88 + state[2]*subx_89;
    state_n[0] = state[0] + subx_1*(subx_16*subx_37 + subx_2*subx_36 + subx_38*subx_5) + subx_39*subx_43 + subx_44*subx_46;
    state_n[1] = state[1] + subx_1*subx_48 + subx_39*(subx_20*subx_42 + subx_25*subx_41 + subx_38*subx_47) + subx_44*subx_49;
    state_n[2] = state[2] + subx_1*subx_52 + subx_39*subx_53 + subx_44*(subx_11*subx_45 + subx_37*subx_50 + subx_41*subx_51);
    state_n[3] = state[3] + subx_1*subx_57 + subx_39*subx_58 + subx_44*subx_59;
    state_n[4] = state[4] + subx_1*subx_63 + subx_39*subx_64 + subx_44*subx_65;
    state_n[5] = state[5] + subx_1*subx_72 + subx_39*subx_73 + subx_44*subx_74;
    state_n[6] = state[6] + subx_1*subx_75 + subx_39*subx_76 + subx_44*subx_77;
    state_n[7] = state[7] + subx_1*subx_80 + subx_39*subx_81 + subx_44*subx_82;
    state_n[8] = state[8] + subx_1*subx_87 + subx_39*subx_88 + subx_44*subx_89;
    state_n[9] = state[9] + subx_1*(subx_10*subx_37 + subx_30*subx_36 + subx_38*subx_4) + subx_39*(subx_10*subx_41 + subx_30*subx_38 + subx_4*subx_42) + subx_44*(subx_10*subx_45 + subx_30*subx_37 + subx_4*subx_41);
    cov_n[0] = cov[0]*subx_90 + cov[1]*state[9]*subx_43 + cov[2]*state[9]*subx_46 + cov[6]*subx_91 + cov[7]*subx_92 + cov[8]*subx_93 + cov[9]*subx_94;
    cov_n[1] = cov[10]*state[9]*subx_43 + cov[15]*subx_91 + cov[16]*subx_92 + cov[17]*subx_93 + cov[18]*subx_94 + cov[1]*subx_90 + subx_24*subx_46;
    cov_n[2] = cov[19]*state[9]*subx_46 + cov[23]*subx_91 + cov[24]*subx_92 + cov[25]*subx_93 + cov[26]*subx_94 + cov[2]*subx_90 + subx_24*subx_43;
    cov_n[3] = cov[12]*state[9]*subx_43 + cov[20]*state[9]*subx_46 + cov[30]*subx_91 + cov[31]*subx_92 + cov[32]*subx_93 + cov[33]*subx_94 + cov[3]*subx_90;
    cov_n[4] = cov[13]*state[9]*subx_43 + cov[21]*state[9]*subx_46 + cov[36]*subx_91 + cov[37]*subx_92 + cov[38]*subx_93 + cov[39]*subx_94 + cov[4]*subx_90;
    cov_n[5] = cov[41]*subx_91 + cov[42]*subx_92 + cov[43]*subx_93 + cov[44]*subx_94 + cov[5]*subx_90 + subx_43*subx_70 + subx_46*subx_68;
    cov_n[6] = cov[45]*subx_91 + cov[46]*subx_92 + cov[47]*subx_93 + cov[48]*subx_94 + cov[6]*subx_90 + subx_17*subx_46 + subx_43*subx_6;
    cov_n[7] = cov[46]*subx_91 + cov[49]*subx_92 + cov[50]*subx_93 + cov[51]*subx_94 + cov[7]*subx_90 + subx_21*subx_43 + subx_26*subx_46;
    cov_n[8] = cov[47]*subx_91 + cov[50]*subx_92 + cov[52]*subx_93 + cov[53]*subx_94 + cov[8]*subx_90 + subx_13*subx_46 + subx_43*subx_85;
    cov_n[9] = cov[48]*subx_91 + cov[51]*subx_92 + cov[53]*subx_93 + cov[54]*subx_94 + cov[9]*subx_90 + subx_3*subx_43 + subx_46*subx_9;
    cov_n[10] = cov[10]*subx_95 + cov[15]*subx_96 + cov[16]*subx_97 + cov[17]*subx_98 + cov[18]*subx_99 + cov[1]*state[9]*subx_48 + subx_24*subx_49;
    cov_n[11] = cov[11]*subx_95 + cov[19]*state[9]*subx_49 + cov[23]*subx_96 + cov[24]*subx_97 + cov[25]*subx_98 + cov[26]*subx_99 + cov[2]*state[9]*subx_48;
    cov_n[12] = cov[12]*subx_95 + cov[20]*state[9]*subx_49 + cov[30]*subx_96 + cov[31]*subx_97 + cov[32]*subx_98 + cov[33]*subx_99 + cov[3]*state[9]*subx_48;
    cov_n[13] = cov[13]*subx_95 + cov[21]*state[9]*subx_49 + cov[36]*subx_96 + cov[37]*subx_97 + cov[38]*subx_98 + cov[39]*subx_99 + cov[4]*state[9]*subx_48;
    cov_n[14] = cov[14]*subx_95 + cov[41]*subx_96 + cov[42]*subx_97 + cov[43]*subx_98 + cov[44]*subx_99 + subx_48*subx_66 + subx_49*subx_68;
    cov_n[15] = cov[15]*subx_95 + cov[45]*subx_96 + cov[46]*subx_97 + cov[47]*subx_98 + cov[48]*subx_99 + subx_17*subx_49 + subx_31*subx_48;
    cov_n[16] = cov[16]*subx_95 + cov[46]*subx_96 + cov[49]*subx_97 + cov[50]*subx_98 + cov[51]*subx_99 + subx_26*subx_49 + subx_48*subx_78;
    cov_n[17] = cov[17]*subx_95 + cov[47]*subx_96 + cov[50]*subx_97 + cov[52]*subx_98 + cov[53]*subx_99 + subx_13*subx_49 + subx_48*subx_83;
    cov_n[18] = cov[18]*subx_95 + cov[48]*subx_96 + cov[51]*subx_97 + cov[53]*subx_98 + cov[54]*subx_99 + subx_29*subx_48 + subx_49*subx_9;
    cov_n[19] = cov[19]*subx_100 + cov[23]*subx_101 + cov[24]*subx_102 + cov[25]*subx_103 + cov[26]*subx_104 + cov[2]*state[9]*subx_52 + subx_24*subx_53;
    cov_n[20] = cov[12]*state[9]*subx_53 + cov[20]*subx_100 + cov[30]*subx_101 + cov[31]*subx_102 + cov[32]*subx_103 + cov[33]*subx_104 + cov[3]*state[9]*subx_52;
    cov_n[21] = cov[13]*state[9]*subx_53 + cov[21]*subx_100 + cov[36]*subx_101 + cov[37]*subx_102 + cov[38]*subx_103 + cov[39]*subx_104 + cov[4]*state[9]*subx_52;
    cov_n[22] = cov[22]*subx_100 + cov[41]*subx_101 + cov[42]*subx_102 + cov[43]*subx_103 + cov[44]*subx_104 + subx_52*subx_66 + subx_53*subx_70;
    cov_n[23] = cov[23]*subx_100 + cov[45]*subx_101 + cov[46]*subx_102 + cov[47]*subx_103 + cov[48]*subx_104 + subx_31*subx_52 + subx_53*subx_6;
    cov_n[24] = cov[24]*subx_100 + cov[46]*subx_101 + cov[49]*subx_102 + cov[50]*subx_103 + cov[51]*subx_104 + subx_21*subx_53 + subx_52*subx_78;
    cov_n[25] = cov[25]*subx_100 + cov[47]*subx_101 + cov[50]*subx_102 + cov[52]*subx_103 + cov[53]*subx_104 + subx_52*subx_83 + subx_53*subx_85;
    cov_n[26] = cov[26]*subx_100 + cov[48]*subx_101 + cov[51]*subx_102 + cov[53]*subx_103 + cov[54]*subx_104 + subx_29*subx_52 + subx_3*subx_53;
    cov_n[27] = cov[12]*state[9]*subx_58 + cov[20]*state[9]*subx_59 + cov[27] + cov[30]*subx_105 + cov[31]*subx_106 + cov[32]*subx_107 + cov[33]*subx_108 + cov[3]*state[9]*subx_57;
    cov_n[28] = cov[13]*state[9]*subx_58 + cov[21]*state[9]*subx_59 + cov[28] + cov[36]*subx_105 + cov[37]*subx_106 + cov[38]*subx_107 + cov[39]*subx_108 + cov[4]*state[9]*subx_57;
    cov_n[29] = cov[29] + cov[41]*subx_105 + cov[42]*subx_106 + cov[43]*subx_107 + cov[44]*subx_108 + subx_57*subx_66 + subx_58*subx_70 + subx_59*subx_68;
    cov_n[30] = cov[30] + cov[45]*subx_105 + cov[46]*subx_106 + cov[47]*subx_107 + cov[48]*subx_108 + subx_17*subx_59 + subx_31*subx_57 + subx_58*subx_6;
    cov_n[31] = cov[31] + cov[46]*subx_105 + cov[49]*subx_106 + cov[50]*subx_107 + cov[51]*subx_108 + subx_21*subx_58 + subx_26*subx_59 + subx_57*subx_78;
    cov_n[32] = cov[32] + cov[47]*subx_105 + cov[50]*subx_106 + cov[52]*subx_107 + cov[53]*subx_108 + subx_13*subx_59 + subx_57*subx_83 + subx_58*subx_85;
    cov_n[33] = cov[33] + cov[48]*subx_105 + cov[51]*subx_106 + cov[53]*subx_107 + cov[54]*subx_108 + subx_29*subx_57 + subx_3*subx_58 + subx_59*subx_9;
    cov_n[34] = cov[13]*state[9]*subx_64 + cov[21]*state[9]*subx_65 + cov[34] + cov[36]*subx_109 + cov[37]*subx_110 + cov[38]*subx_111 + cov[39]*subx_112 + cov[4]*state[9]*subx_63;
    cov_n[35] = cov[35] + cov[41]*subx_109 + cov[42]*subx_110 + cov[43]*subx_111 + cov[44]*subx_112 + subx_63*subx_66 + subx_64*subx_70 + subx_65*subx_68;
    cov_n[36] = cov[36] + cov[45]*subx_109 + cov[46]*subx_110 + cov[47]*subx_111 + cov[48]*subx_112 + subx_17*subx_65 + subx_31*subx_63 + subx_6*subx_64;
    cov_n[37] = cov[37] + cov[46]*subx_109 + cov[49]*subx_110 + cov[50]*subx_111 + cov[51]*subx_112 + subx_21*subx_64 + subx_26*subx_65 + subx_63*subx_78;
    cov_n[38] = cov[38] + cov[47]*subx_109 + cov[50]*subx_110 + cov[52]*subx_111 + cov[53]*subx_112 + subx_13*subx_65 + subx_63*subx_83 + subx_64*subx_85;
    cov_n[39] = cov[39] + cov[48]*subx_109 + cov[51]*subx_110 + cov[53]*subx_111 + cov[54]*subx_112 + subx_29*subx_63 + subx_3*subx_64 + subx_65*subx_9;
    cov_n[40] = cov[40] + cov[41]*subx_113 + cov[42]*subx_114 + cov[43]*subx_115 + cov[44]*subx_116 + subx_66*subx_72 + subx_68*subx_74 + subx_70*subx_73;
    cov_n[41] = cov[41] + cov[45]*subx_113 + cov[46]*subx_114 + cov[47]*subx_115 + cov[48]*subx_116 + subx_17*subx_74 + subx_31*subx_72 + subx_6*subx_73;
    cov_n[42] = cov[42] + cov[46]*subx_113 + cov[49]*subx_114 + cov[50]*subx_115 + cov[51]*subx_116 + subx_21*subx_73 + subx_26*subx_74 + subx_72*subx_78;
    cov_n[43] = cov[43] + cov[47]*subx_113 + cov[50]*subx_114 + cov[52]*subx_115 + cov[53]*subx_116 + subx_13*subx_74 + subx_72*subx_83 + subx_73*subx_85;
    cov_n[44] = cov[44] + cov[48]*subx_113 + cov[51]*subx_114 + cov[53]*subx_115 + cov[54]*subx_116 + subx_29*subx_72 + subx_3*subx_73 + subx_74*subx_9;
    cov_n[45] = cov[45]*subx_117 + cov[46]*subx_118 + cov[47]*subx_119 + cov[48]*subx_120 + subx_17*subx_77 + subx_31*subx_75 + subx_6*subx_76;
    cov_n[46] = cov[46]*subx_117 + cov[49]*subx_118 + cov[50]*subx_119 + cov[51]*subx_120 + subx_21*subx_76 + subx_26*subx_77 + subx_75*subx_78;
    cov_n[47] = cov[47]*subx_117 + cov[50]*subx_118 + cov[52]*subx_119 + cov[53]*subx_120 + subx_13*subx_77 + subx_75*subx_83 + subx_76*subx_85;
    cov_n[48] = cov[48]*subx_117 + cov[51]*subx_118 + cov[53]*subx_119 + cov[54]*subx_120 + subx_29*subx_75 + subx_3*subx_76 + subx_77*subx_9;
    cov_n[49] = cov[46]*subx_121 + cov[49]*subx_122 + cov[50]*subx_123 + cov[51]*subx_124 + subx_21*subx_81 + subx_26*subx_82 + subx_78*subx_80;
    cov_n[50] = cov[47]*subx_121 + cov[50]*subx_122 + cov[52]*subx_123 + cov[53]*subx_124 + subx_13*subx_82 + subx_80*subx_83 + subx_81*subx_85;
    cov_n[51] = cov[48]*subx_121 + cov[51]*subx_122 + cov[53]*subx_123 + cov[54]*subx_124 + subx_29*subx_80 + subx_3*subx_81 + subx_82*subx_9;
    cov_n[52] = cov[47]*(-subx_14*subx_37 - subx_36*subx_84 - subx_38*subx_86) + cov[50]*(-subx_14*subx_41 - subx_38*subx_84 - subx_42*subx_86) + cov[52]*(-subx_14*subx_45 - subx_37*subx_84 - subx_41*subx_86 + 1) + cov[53]*subx_125 + subx_13*subx_89 + subx_83*subx_87 + subx_85*subx_88;
    cov_n[53] = cov[48]*(-subx_14*subx_37 - subx_36*subx_84 - subx_38*subx_86) + cov[51]*(-subx_14*subx_41 - subx_38*subx_84 - subx_42*subx_86) + cov[53]*(-subx_14*subx_45 - subx_37*subx_84 - subx_41*subx_86 + 1) + cov[54]*subx_125 + subx_29*subx_87 + subx_3*subx_88 + subx_89*subx_9;
    cov_n[54] = cov[48]*(-subx_10*subx_37 - subx_30*subx_36 - subx_38*subx_4) + cov[51]*(-subx_10*subx_41 - subx_30*subx_38 - subx_4*subx_42) + cov[53]*(-subx_10*subx_45 - subx_30*subx_37 - subx_4*subx_41) + cov[54]*(state[0]*(subx_10*subx_37 + subx_30*subx_36 + subx_38*subx_4) + state[1]*(subx_10*subx_41 + subx_30*subx_38 + subx_4*subx_42) + state[2]*(subx_10*subx_45 + subx_30*subx_37 + subx_4*subx_41) + 1) + subx_29*(subx_10*subx_37 + subx_30*subx_36 + subx_38*subx_4) + subx_3*(subx_10*subx_41 + subx_30*subx_38 + subx_4*subx_42) + subx_9*(subx_10*subx_45 + subx_30*subx_37 + subx_4*subx_41);

    float NIS = subx_1*(subx_1*subx_36 + subx_37*subx_44 + subx_38*subx_39) + subx_39*(subx_1*subx_38 + subx_39*subx_42 + subx_41*subx_44) + subx_44*(subx_1*subx_37 + subx_39*subx_41 + subx_44*subx_45);

    if (NIS_threshold == 0 || NIS < NIS_threshold) {
        _state_idx = next_state_idx;
        return true;
    }
    return false;
}

bool KF_3D::fuse_vel(const Vector3f& vel, float vel_xy_sigma, float vel_z_sigma, float NIS_threshold) {
    uint8_t next_state_idx = (_state_idx+1)%2;
    float* state = _state[_state_idx].x;
    float* cov = _state[_state_idx].P;
    float* state_n = _state[next_state_idx].x;
    float* cov_n = _state[next_state_idx].P;

    // VEL FUSION
    // 785 operations
    float subx_0 = -state[3] + vel[0];
    float subx_1 = cov[40] + ((vel_z_sigma)*(vel_z_sigma));
    float subx_2 = cov[34] + ((vel_xy_sigma)*(vel_xy_sigma));
    float subx_3 = cov[27] + ((vel_xy_sigma)*(vel_xy_sigma));
    float subx_4 = 1.0/(-((cov[28])*(cov[28]))*subx_1 + 2*cov[28]*cov[29]*cov[35] - ((cov[29])*(cov[29]))*subx_2 - ((cov[35])*(cov[35]))*subx_3 + subx_1*subx_2*subx_3);
    float subx_5 = subx_4*(-((cov[35])*(cov[35])) + subx_1*subx_2);
    float subx_6 = subx_4*(-cov[28]*subx_1 + cov[29]*cov[35]);
    float subx_7 = subx_4*(cov[28]*cov[35] - cov[29]*subx_2);
    float subx_8 = -state[4] + vel[1];
    float subx_9 = subx_4*(-((cov[29])*(cov[29])) + subx_1*subx_3);
    float subx_10 = 1.0/(((cov[28])*(cov[28]))*subx_1 - 2*cov[28]*cov[29]*cov[35] + ((cov[29])*(cov[29]))*subx_2 + ((cov[35])*(cov[35]))*subx_3 - subx_1*subx_2*subx_3);
    float subx_11 = subx_10*(-cov[28]*cov[29] + cov[35]*subx_3);
    float subx_12 = -state[5] + vel[2];
    float subx_13 = subx_10*(((cov[28])*(cov[28])) - subx_2*subx_3);
    float subx_14 = -cov[3]*subx_5 - cov[4]*subx_6 - cov[5]*subx_7;
    float subx_15 = -cov[3]*subx_6 - cov[4]*subx_9 - cov[5]*subx_11;
    float subx_16 = -cov[3]*subx_7 - cov[4]*subx_11 - cov[5]*subx_13;
    float subx_17 = -cov[12]*subx_5 - cov[13]*subx_6 - cov[14]*subx_7;
    float subx_18 = -cov[12]*subx_6 - cov[13]*subx_9 - cov[14]*subx_11;
    float subx_19 = -cov[12]*subx_7 - cov[13]*subx_11 - cov[14]*subx_13;
    float subx_20 = -cov[20]*subx_5 - cov[21]*subx_6 - cov[22]*subx_7;
    float subx_21 = -cov[20]*subx_6 - cov[21]*subx_9 - cov[22]*subx_11;
    float subx_22 = -cov[20]*subx_7 - cov[21]*subx_11 - cov[22]*subx_13;
    float subx_23 = -cov[27]*subx_5 - cov[28]*subx_6 - cov[29]*subx_7 + 1;
    float subx_24 = -cov[27]*subx_6 - cov[28]*subx_9 - cov[29]*subx_11;
    float subx_25 = -cov[27]*subx_7 - cov[28]*subx_11 - cov[29]*subx_13;
    float subx_26 = -cov[28]*subx_5 - cov[34]*subx_6 - cov[35]*subx_7;
    float subx_27 = -cov[28]*subx_6 - cov[34]*subx_9 - cov[35]*subx_11 + 1;
    float subx_28 = -cov[28]*subx_7 - cov[34]*subx_11 - cov[35]*subx_13;
    float subx_29 = -cov[29]*subx_5 - cov[35]*subx_6 - cov[40]*subx_7;
    float subx_30 = -cov[29]*subx_6 - cov[35]*subx_9 - cov[40]*subx_11;
    float subx_31 = -cov[29]*subx_7 - cov[35]*subx_11 - cov[40]*subx_13 + 1;
    float subx_32 = -cov[30]*subx_5 - cov[36]*subx_6 - cov[41]*subx_7;
    float subx_33 = -cov[30]*subx_6 - cov[36]*subx_9 - cov[41]*subx_11;
    float subx_34 = -cov[30]*subx_7 - cov[36]*subx_11 - cov[41]*subx_13;
    float subx_35 = -cov[31]*subx_5 - cov[37]*subx_6 - cov[42]*subx_7;
    float subx_36 = -cov[31]*subx_6 - cov[37]*subx_9 - cov[42]*subx_11;
    float subx_37 = -cov[31]*subx_7 - cov[37]*subx_11 - cov[42]*subx_13;
    state_n[0] = state[0] + subx_0*(cov[3]*subx_5 + cov[4]*subx_6 + cov[5]*subx_7) + subx_12*(cov[3]*subx_7 + cov[4]*subx_11 + cov[5]*subx_13) + subx_8*(cov[3]*subx_6 + cov[4]*subx_9 + cov[5]*subx_11);
    state_n[1] = state[1] + subx_0*(cov[12]*subx_5 + cov[13]*subx_6 + cov[14]*subx_7) + subx_12*(cov[12]*subx_7 + cov[13]*subx_11 + cov[14]*subx_13) + subx_8*(cov[12]*subx_6 + cov[13]*subx_9 + cov[14]*subx_11);
    state_n[2] = state[2] + subx_0*(cov[20]*subx_5 + cov[21]*subx_6 + cov[22]*subx_7) + subx_12*(cov[20]*subx_7 + cov[21]*subx_11 + cov[22]*subx_13) + subx_8*(cov[20]*subx_6 + cov[21]*subx_9 + cov[22]*subx_11);
    state_n[3] = state[3] + subx_0*(cov[27]*subx_5 + cov[28]*subx_6 + cov[29]*subx_7) + subx_12*(cov[27]*subx_7 + cov[28]*subx_11 + cov[29]*subx_13) + subx_8*(cov[27]*subx_6 + cov[28]*subx_9 + cov[29]*subx_11);
    state_n[4] = state[4] + subx_0*(cov[28]*subx_5 + cov[34]*subx_6 + cov[35]*subx_7) + subx_12*(cov[28]*subx_7 + cov[34]*subx_11 + cov[35]*subx_13) + subx_8*(cov[28]*subx_6 + cov[34]*subx_9 + cov[35]*subx_11);
    state_n[5] = state[5] + subx_0*(cov[29]*subx_5 + cov[35]*subx_6 + cov[40]*subx_7) + subx_12*(cov[29]*subx_7 + cov[35]*subx_11 + cov[40]*subx_13) + subx_8*(cov[29]*subx_6 + cov[35]*subx_9 + cov[40]*subx_11);
    state_n[6] = state[6] + subx_0*(cov[30]*subx_5 + cov[36]*subx_6 + cov[41]*subx_7) + subx_12*(cov[30]*subx_7 + cov[36]*subx_11 + cov[41]*subx_13) + subx_8*(cov[30]*subx_6 + cov[36]*subx_9 + cov[41]*subx_11);
    state_n[7] = state[7] + subx_0*(cov[31]*subx_5 + cov[37]*subx_6 + cov[42]*subx_7) + subx_12*(cov[31]*subx_7 + cov[37]*subx_11 + cov[42]*subx_13) + subx_8*(cov[31]*subx_6 + cov[37]*subx_9 + cov[42]*subx_11);
    state_n[8] = state[8] + subx_0*(cov[32]*subx_5 + cov[38]*subx_6 + cov[43]*subx_7) + subx_12*(cov[32]*subx_7 + cov[38]*subx_11 + cov[43]*subx_13) + subx_8*(cov[32]*subx_6 + cov[38]*subx_9 + cov[43]*subx_11);
    state_n[9] = state[9] + subx_0*(cov[33]*subx_5 + cov[39]*subx_6 + cov[44]*subx_7) + subx_12*(cov[33]*subx_7 + cov[39]*subx_11 + cov[44]*subx_13) + subx_8*(cov[33]*subx_6 + cov[39]*subx_9 + cov[44]*subx_11);
    cov_n[0] = cov[0] + cov[3]*subx_14 + cov[4]*subx_15 + cov[5]*subx_16;
    cov_n[1] = cov[12]*subx_14 + cov[13]*subx_15 + cov[14]*subx_16 + cov[1];
    cov_n[2] = cov[20]*subx_14 + cov[21]*subx_15 + cov[22]*subx_16 + cov[2];
    cov_n[3] = cov[27]*subx_14 + cov[28]*subx_15 + cov[29]*subx_16 + cov[3];
    cov_n[4] = cov[28]*subx_14 + cov[34]*subx_15 + cov[35]*subx_16 + cov[4];
    cov_n[5] = cov[29]*subx_14 + cov[35]*subx_15 + cov[40]*subx_16 + cov[5];
    cov_n[6] = cov[30]*subx_14 + cov[36]*subx_15 + cov[41]*subx_16 + cov[6];
    cov_n[7] = cov[31]*subx_14 + cov[37]*subx_15 + cov[42]*subx_16 + cov[7];
    cov_n[8] = cov[32]*subx_14 + cov[38]*subx_15 + cov[43]*subx_16 + cov[8];
    cov_n[9] = cov[33]*subx_14 + cov[39]*subx_15 + cov[44]*subx_16 + cov[9];
    cov_n[10] = cov[10] + cov[12]*subx_17 + cov[13]*subx_18 + cov[14]*subx_19;
    cov_n[11] = cov[11] + cov[20]*subx_17 + cov[21]*subx_18 + cov[22]*subx_19;
    cov_n[12] = cov[12] + cov[27]*subx_17 + cov[28]*subx_18 + cov[29]*subx_19;
    cov_n[13] = cov[13] + cov[28]*subx_17 + cov[34]*subx_18 + cov[35]*subx_19;
    cov_n[14] = cov[14] + cov[29]*subx_17 + cov[35]*subx_18 + cov[40]*subx_19;
    cov_n[15] = cov[15] + cov[30]*subx_17 + cov[36]*subx_18 + cov[41]*subx_19;
    cov_n[16] = cov[16] + cov[31]*subx_17 + cov[37]*subx_18 + cov[42]*subx_19;
    cov_n[17] = cov[17] + cov[32]*subx_17 + cov[38]*subx_18 + cov[43]*subx_19;
    cov_n[18] = cov[18] + cov[33]*subx_17 + cov[39]*subx_18 + cov[44]*subx_19;
    cov_n[19] = cov[19] + cov[20]*subx_20 + cov[21]*subx_21 + cov[22]*subx_22;
    cov_n[20] = cov[20] + cov[27]*subx_20 + cov[28]*subx_21 + cov[29]*subx_22;
    cov_n[21] = cov[21] + cov[28]*subx_20 + cov[34]*subx_21 + cov[35]*subx_22;
    cov_n[22] = cov[22] + cov[29]*subx_20 + cov[35]*subx_21 + cov[40]*subx_22;
    cov_n[23] = cov[23] + cov[30]*subx_20 + cov[36]*subx_21 + cov[41]*subx_22;
    cov_n[24] = cov[24] + cov[31]*subx_20 + cov[37]*subx_21 + cov[42]*subx_22;
    cov_n[25] = cov[25] + cov[32]*subx_20 + cov[38]*subx_21 + cov[43]*subx_22;
    cov_n[26] = cov[26] + cov[33]*subx_20 + cov[39]*subx_21 + cov[44]*subx_22;
    cov_n[27] = cov[27]*subx_23 + cov[28]*subx_24 + cov[29]*subx_25;
    cov_n[28] = cov[28]*subx_23 + cov[34]*subx_24 + cov[35]*subx_25;
    cov_n[29] = cov[29]*subx_23 + cov[35]*subx_24 + cov[40]*subx_25;
    cov_n[30] = cov[30]*subx_23 + cov[36]*subx_24 + cov[41]*subx_25;
    cov_n[31] = cov[31]*subx_23 + cov[37]*subx_24 + cov[42]*subx_25;
    cov_n[32] = cov[32]*subx_23 + cov[38]*subx_24 + cov[43]*subx_25;
    cov_n[33] = cov[33]*subx_23 + cov[39]*subx_24 + cov[44]*subx_25;
    cov_n[34] = cov[28]*subx_26 + cov[34]*subx_27 + cov[35]*subx_28;
    cov_n[35] = cov[29]*subx_26 + cov[35]*subx_27 + cov[40]*subx_28;
    cov_n[36] = cov[30]*subx_26 + cov[36]*subx_27 + cov[41]*subx_28;
    cov_n[37] = cov[31]*subx_26 + cov[37]*subx_27 + cov[42]*subx_28;
    cov_n[38] = cov[32]*subx_26 + cov[38]*subx_27 + cov[43]*subx_28;
    cov_n[39] = cov[33]*subx_26 + cov[39]*subx_27 + cov[44]*subx_28;
    cov_n[40] = cov[29]*subx_29 + cov[35]*subx_30 + cov[40]*subx_31;
    cov_n[41] = cov[30]*subx_29 + cov[36]*subx_30 + cov[41]*subx_31;
    cov_n[42] = cov[31]*subx_29 + cov[37]*subx_30 + cov[42]*subx_31;
    cov_n[43] = cov[32]*subx_29 + cov[38]*subx_30 + cov[43]*subx_31;
    cov_n[44] = cov[33]*subx_29 + cov[39]*subx_30 + cov[44]*subx_31;
    cov_n[45] = cov[30]*subx_32 + cov[36]*subx_33 + cov[41]*subx_34 + cov[45];
    cov_n[46] = cov[31]*subx_32 + cov[37]*subx_33 + cov[42]*subx_34 + cov[46];
    cov_n[47] = cov[32]*subx_32 + cov[38]*subx_33 + cov[43]*subx_34 + cov[47];
    cov_n[48] = cov[33]*subx_32 + cov[39]*subx_33 + cov[44]*subx_34 + cov[48];
    cov_n[49] = cov[31]*subx_35 + cov[37]*subx_36 + cov[42]*subx_37 + cov[49];
    cov_n[50] = cov[32]*subx_35 + cov[38]*subx_36 + cov[43]*subx_37 + cov[50];
    cov_n[51] = cov[33]*subx_35 + cov[39]*subx_36 + cov[44]*subx_37 + cov[51];
    cov_n[52] = cov[32]*(-cov[32]*subx_5 - cov[38]*subx_6 - cov[43]*subx_7) + cov[38]*(-cov[32]*subx_6 - cov[38]*subx_9 - cov[43]*subx_11) + cov[43]*(-cov[32]*subx_7 - cov[38]*subx_11 - cov[43]*subx_13) + cov[52];
    cov_n[53] = cov[33]*(-cov[32]*subx_5 - cov[38]*subx_6 - cov[43]*subx_7) + cov[39]*(-cov[32]*subx_6 - cov[38]*subx_9 - cov[43]*subx_11) + cov[44]*(-cov[32]*subx_7 - cov[38]*subx_11 - cov[43]*subx_13) + cov[53];
    cov_n[54] = cov[33]*(-cov[33]*subx_5 - cov[39]*subx_6 - cov[44]*subx_7) + cov[39]*(-cov[33]*subx_6 - cov[39]*subx_9 - cov[44]*subx_11) + cov[44]*(-cov[33]*subx_7 - cov[39]*subx_11 - cov[44]*subx_13) + cov[54];

    float NIS = subx_0*(subx_0*subx_5 + subx_12*subx_7 + subx_6*subx_8) + subx_12*(subx_0*subx_7 + subx_11*subx_8 + subx_12*subx_13) + subx_8*(subx_0*subx_6 + subx_11*subx_12 + subx_8*subx_9);

    if (NIS_threshold == 0 || NIS < NIS_threshold) {
        _state_idx = next_state_idx;
        return true;
    }
    return false;
}

bool KF_3D::fuse_vel_z(float vel_z, float vel_z_sigma, float NIS_threshold) {
    uint8_t next_state_idx = (_state_idx+1)%2;
    float* state = _state[_state_idx].x;
    float* cov = _state[_state_idx].P;
    float* state_n = _state[next_state_idx].x;
    float* cov_n = _state[next_state_idx].P;

    // VEL_Z FUSION
    // 166 operations
    float subx_0 = 1.0/(cov[40] + ((vel_z_sigma)*(vel_z_sigma)));
    float subx_1 = subx_0*(-state[5] + vel_z);
    float subx_2 = cov[35]*subx_0;
    float subx_3 = cov[40]*subx_0;
    float subx_4 = cov[44]*subx_0;
    float subx_5 = cov[22]*subx_0;
    state_n[0] = cov[5]*subx_1 + state[0];
    state_n[1] = cov[14]*subx_1 + state[1];
    state_n[2] = cov[22]*subx_1 + state[2];
    state_n[3] = cov[29]*subx_1 + state[3];
    state_n[4] = state[4] + subx_2*(-state[5] + vel_z);
    state_n[5] = state[5] + subx_3*(-state[5] + vel_z);
    state_n[6] = cov[41]*subx_1 + state[6];
    state_n[7] = cov[42]*subx_1 + state[7];
    state_n[8] = cov[43]*subx_1 + state[8];
    state_n[9] = state[9] + subx_4*(-state[5] + vel_z);
    cov_n[0] = cov[0] - ((cov[5])*(cov[5]))*subx_0;
    cov_n[1] = -cov[14]*cov[5]*subx_0 + cov[1];
    cov_n[2] = cov[2] - cov[5]*subx_5;
    cov_n[3] = -cov[29]*cov[5]*subx_0 + cov[3];
    cov_n[4] = cov[4] - cov[5]*subx_2;
    cov_n[5] = -cov[5]*subx_3 + cov[5];
    cov_n[6] = -cov[41]*cov[5]*subx_0 + cov[6];
    cov_n[7] = -cov[42]*cov[5]*subx_0 + cov[7];
    cov_n[8] = -cov[43]*cov[5]*subx_0 + cov[8];
    cov_n[9] = -cov[5]*subx_4 + cov[9];
    cov_n[10] = cov[10] - ((cov[14])*(cov[14]))*subx_0;
    cov_n[11] = cov[11] - cov[14]*subx_5;
    cov_n[12] = cov[12] - cov[14]*cov[29]*subx_0;
    cov_n[13] = cov[13] - cov[14]*subx_2;
    cov_n[14] = -cov[14]*subx_3 + cov[14];
    cov_n[15] = -cov[14]*cov[41]*subx_0 + cov[15];
    cov_n[16] = -cov[14]*cov[42]*subx_0 + cov[16];
    cov_n[17] = -cov[14]*cov[43]*subx_0 + cov[17];
    cov_n[18] = -cov[14]*subx_4 + cov[18];
    cov_n[19] = cov[19] - ((cov[22])*(cov[22]))*subx_0;
    cov_n[20] = cov[20] - cov[29]*subx_5;
    cov_n[21] = cov[21] - cov[22]*subx_2;
    cov_n[22] = -cov[22]*subx_3 + cov[22];
    cov_n[23] = cov[23] - cov[41]*subx_5;
    cov_n[24] = cov[24] - cov[42]*subx_5;
    cov_n[25] = cov[25] - cov[43]*subx_5;
    cov_n[26] = -cov[22]*subx_4 + cov[26];
    cov_n[27] = cov[27] - ((cov[29])*(cov[29]))*subx_0;
    cov_n[28] = cov[28] - cov[29]*subx_2;
    cov_n[29] = -cov[29]*subx_3 + cov[29];
    cov_n[30] = -cov[29]*cov[41]*subx_0 + cov[30];
    cov_n[31] = -cov[29]*cov[42]*subx_0 + cov[31];
    cov_n[32] = -cov[29]*cov[43]*subx_0 + cov[32];
    cov_n[33] = -cov[29]*subx_4 + cov[33];
    cov_n[34] = cov[34] - ((cov[35])*(cov[35]))*subx_0;
    cov_n[35] = -cov[35]*subx_3 + cov[35];
    cov_n[36] = cov[36] - cov[41]*subx_2;
    cov_n[37] = cov[37] - cov[42]*subx_2;
    cov_n[38] = cov[38] - cov[43]*subx_2;
    cov_n[39] = cov[39] - cov[44]*subx_2;
    cov_n[40] = cov[40]*(-subx_3 + 1);
    cov_n[41] = cov[41]*(-subx_3 + 1);
    cov_n[42] = cov[42]*(-subx_3 + 1);
    cov_n[43] = cov[43]*(-subx_3 + 1);
    cov_n[44] = cov[44]*(-subx_3 + 1);
    cov_n[45] = -((cov[41])*(cov[41]))*subx_0 + cov[45];
    cov_n[46] = -cov[41]*cov[42]*subx_0 + cov[46];
    cov_n[47] = -cov[41]*cov[43]*subx_0 + cov[47];
    cov_n[48] = -cov[41]*subx_4 + cov[48];
    cov_n[49] = -((cov[42])*(cov[42]))*subx_0 + cov[49];
    cov_n[50] = -cov[42]*cov[43]*subx_0 + cov[50];
    cov_n[51] = -cov[42]*subx_4 + cov[51];
    cov_n[52] = -((cov[43])*(cov[43]))*subx_0 + cov[52];
    cov_n[53] = -cov[43]*subx_4 + cov[53];
    cov_n[54] = -((cov[44])*(cov[44]))*subx_0 + cov[54];

    float NIS = subx_0*((-state[5] + vel_z)*(-state[5] + vel_z));

    if (NIS_threshold == 0 || NIS < NIS_threshold) {
        _state_idx = next_state_idx;
        return true;
    }
    return false;
}

void KF_3D::getPos(float* ret) {
    float* state = _state[_state_idx].x;

    // TARGET POS RELATIVE TO VEHICLE
    ret[0] = -state[0] + state[6]/state[9];
    ret[1] = -state[1] + state[7]/state[9];
    ret[2] = -state[2] + state[8]/state[9];
}

void KF_3D::getVel(float* ret) {
    float* state = _state[_state_idx].x;

    // TARGET VEL RELATIVE TO VEHICLE
    ret[0] = -state[3];
    ret[1] = -state[4];
    ret[2] = -state[5];
}

void KF_3D::getState(float* ret) {
    memcpy(ret,_state[_state_idx].x,sizeof(_state[_state_idx].x));
}
